trigger:
  batch: true

schedules:
  - cron: "0 1 * * *"
    displayName: "Nightly"
    branches:
      include:
        - master

variables:
  CI: true

jobs:
  - job: package_selection
    displayName: 'Package selection'
    pool:
      vmImage: 'ubuntu latest'
    steps:
      - task: Bash@3
        displayName: 'Determine packages to be build'
        name: matrix
        inputs:
          targetType: 'inline'
          script: |
            wget https://raw.githubusercontent.com/tue-robotics/tue-env/master/ci/packages.sh
            wget https://raw.githubusercontent.com/tue-robotics/tue-env/master/ci/azure_commit_range.py
            export COMMIT_RANGE=$(python3 ./azure_commit_range.py)
            ALL=$([ $BUILD_REASON == "Schedule" ] && echo "true")
            source ./packages.sh --pullrequest=${SYSTEM_PULLREQUEST_PULLREQUESTNUMBER:-false} --branch=$SYSTEM_PULLREQUEST_TARGETBRANCH --commit-range=$COMMIT_RANGE --all=$ALL tue_robocup challenge_following_and_guiding challenge_manipulation challenge_navigation challenge_person_recognition challenge_spr challenge_speech_recognition
            echo "##vso[task.setVariable variable=json_string;isOutput=true]$PACKAGES_DICT"
        condition: and(not(canceled()), not(failed()))

  - job: install_build_test
    displayName: 'Install, build & test:'
    pool:
      vmImage: 'ubuntu latest'
    dependsOn: package_selection
    condition: and(not(canceled()), not(failed()), ne(dependencies.package_selection.outputs['matrix.json_string'], '{}'))
    strategy:
      matrix: $[ dependencies.package_selection.outputs['matrix.json_string'] ]
    steps:
    - task: Cache@2
      inputs:
        key: 'docker | "$(Agent.OS)"'
        path: $(Pipeline.Workspace)/docker
        cacheHitVar: DOCKER_CACHE_RESTORED
      displayName: Caching Docker image
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          ls -la $(Pipeline.Workspace)/docker
          docker load < $(Pipeline.Workspace)/docker/cachedDocker.tar
      condition: and(not(canceled()), eq(variables.DOCKER_CACHE_RESTORED, 'true'))
      displayName: 'Load cached Docker image'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          wget https://raw.githubusercontent.com/tue-robotics/tue-env/master/ci/install-package.sh
          wget https://raw.githubusercontent.com/tue-robotics/tue-env/master/ci/build-package.sh
          wget https://raw.githubusercontent.com/tue-robotics/tue-env/master/ci/test-package.sh
      condition: and(not(canceled()), not(failed()))
      displayName: 'Get CI scripts'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          bash install-package.sh --package=$PACKAGE --branch=${SYSTEM_PULLREQUEST_TARGETBRANCH:-${BUILD_SOURCEBRANCH#refs/heads/}} --commit=${BUILD_SOURCEVERSION} --pullrequest=${SYSTEM_PULLREQUEST_PULLREQUESTNUMBER:-false} --image="tuerobotics/tue-env"
      displayName: 'Install'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          bash build-package.sh --package=$PACKAGE
      condition: and(not(canceled()), not(failed()))
      displayName: 'Build'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          bash test-package.sh --package=$PACKAGE
      condition: and(not(canceled()), not(failed()))
      displayName: 'Test'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          mkdir -p $(Pipeline.Workspace)/docker
          docker save $(docker images -a -q) > $(Pipeline.Workspace)/docker/cachedDocker.tar
      displayName: 'Save Docker images'
      condition: and(not(canceled()), not(failed()))
